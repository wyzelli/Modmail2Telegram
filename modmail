import praw
import telegram
import time
import configparser

# Load the OAuth information from the praw.ini file
# https://core.telegram.org/bots#creating-a-new-bot
config = configparser.ConfigParser()
config.read("praw.ini")
client_id = config.get("reddit", "client_id")
client_secret = config.get("reddit", "client_secret")
username = config.get("reddit", "username")
password = config.get("reddit", "password")
user_agent = config.get("reddit", "user_agent")
telegram_bot_token = config.get("telegram", "bot_token")
telegram_chat_id = config.get("telegram", "chat_id")

# Set up the PRAW Reddit API wrapper and Telegram bot API wrapper
reddit = praw.Reddit(
    client_id=client_id,
    client_secret=client_secret,
    username=username,
    password=password,
    user_agent=user_agent,
)
bot = telegram.Bot(token=telegram_bot_token)

# bot.send_message(chat_id=telegram_chat_id, text='message')


# Set the subreddit and modmail folder to monitor
subreddit_name = "R/Sudoku"
modmail_folder = "mod"
subreddit = reddit.subreddit(subreddit_name)
modmail = subreddit.modmail

# Set the loop delay to 10 minutes (in seconds)
loop_delay = 10 * 60

# Start the loop
while True:

    # Loop through the modmail threads in the specified folder
    for thread in modmail.replies(folder=modmail_folder):

        # Check if the thread has any new messages since the last time we checked
        if thread.last_unread is not None:

            # Send a Telegram message with the thread's subject and permalink
            message = f"New modmail in {subreddit_name} - {thread.subject}\n\n{thread.permalink}"
            bot.send_message(chat_id=telegram_chat_id, text=message)

            # Mark the thread as read so we don't get duplicate notifications
            thread.mark_read()

    # Wait for the specified delay before running the loop again
    time.sleep(loop_delay)
